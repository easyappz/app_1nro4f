openapi: 3.0.3
info:
  title: Listings, Accounts and Comments API
  version: 1.5.0
  description: API for resolving Avito listings and accounts, deduplicating by IDs, tracking popularity, and managing comments with likes.
servers:
  - url: /api
paths:
  /hello:
    get:
      summary: Health hello message
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                message: Hello from API!
        '500':
          description: Server error
          content:
            application/json:
              example:
                error:
                  message: Internal error
                  details: Failed to handle /hello
  /status:
    get:
      summary: Service status
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                status: ok
                timestamp: 2025-01-01T00:00:00.000Z
                uptimeSec: 123
        '500':
          description: Server error
          content:
            application/json:
              example:
                error:
                  message: Internal error
                  details: Failed to handle /status
  /listings/resolve:
    post:
      summary: Resolve listing by Avito URL, normalize and deduplicate by avitoId
      description: |
        Accepts an original Avito URL, fetches details (title, mainImageUrl, canonicalUrl),
        determines avitoId, and either links to an existing listing or creates a new one.
        Deduplication is deterministic by avitoId: existing listing returns 200, new returns 201.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [url]
              properties:
                url:
                  type: string
                  example: https://www.avito.ru/moskva/bytovaya_elektronika/iphone_14_pro_256gb_123456789
      responses:
        '200':
          description: Listing already exists (found by avitoId or legacy URL)
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Listing'
        '201':
          description: Listing created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Listing'
        '400':
          description: Bad request (invalid url)
          content:
            application/json:
              example:
                error:
                  message: Invalid URL: not-a-valid-url
                  details: URL constructor failed
        '422':
          description: Could not determine avitoId from the provided URL/page
          content:
            application/json:
              example:
                error:
                  message: Unable to resolve avitoId from page content or URL
                  details: Empty avitoId or parse failure
        '500':
          description: Server error while resolving/creating
          content:
            application/json:
              example:
                error:
                  message: Failed to fetch Avito details: Network timeout
                  details: Network timeout
  /listings/popular:
    get:
      summary: Get popular listings ordered by viewsCount desc
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Listing'
                  meta:
                    type: object
                    properties:
                      limit:
                        type: integer
        '500':
          description: Server error
          content:
            application/json:
              example:
                error:
                  message: Unexpected error
                  details: Stack or message
  /listings/{id}:
    get:
      summary: Get listing by id and increment its viewsCount
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Listing ObjectId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Listing'
        '400':
          description: Invalid id
          content:
            application/json:
              example:
                error:
                  message: Invalid listing id
                  details: Bad ObjectId
        '404':
          description: Listing not found
          content:
            application/json:
              example:
                error:
                  message: Listing not found
                  details: No document with provided id
        '500':
          description: Server error
          content:
            application/json:
              example:
                error:
                  message: Unexpected error
                  details: Stack or message
  /listings/{id}/comments:
    get:
      summary: List comments for a listing (newest first)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Listing ObjectId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid id
          content:
            application/json:
              example:
                error:
                  message: Invalid listing id
                  details: Bad ObjectId
        '404':
          description: Listing not found
          content:
            application/json:
              example:
                error:
                  message: Listing not found
                  details: No document with provided id
        '500':
          description: Server error
          content:
            application/json:
              example:
                error:
                  message: Unexpected error
                  details: Stack or message
    post:
      summary: Create a comment for a listing
      description: |
        The server deterministically generates authorName from the provided nameKey using a stable algorithm.
        Backward compatibility: if legacy authorName is provided without nameKey, it will be used. If nameKey is present, authorName from the client is ignored.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Listing ObjectId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [nameKey, text]
              properties:
                nameKey:
                  type: string
                  example: session-abc-123
                authorName:
                  type: string
                  deprecated: true
                text:
                  type: string
                  example: Please contact me
      responses:
        '201':
          description: Comment created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Comment'
        '400':
          description: Validation error
          content:
            application/json:
              example:
                error:
                  message: Field "text" is required
                  details: Empty text
        '404':
          description: Listing not found
          content:
            application/json:
              example:
                error:
                  message: Listing not found
                  details: No document with provided id
        '500':
          description: Server error
          content:
            application/json:
              example:
                error:
                  message: Unexpected error
                  details: Stack or message
  /listings/{id}/comments/popular:
    get:
      summary: List most popular comments for a listing
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Listing ObjectId
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 10
            default: 2
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid id
          content:
            application/json:
              example:
                error:
                  message: Invalid listing id
                  details: Bad ObjectId
        '404':
          description: Listing not found
          content:
            application/json:
              example:
                error:
                  message: Listing not found
                  details: No document with provided id
        '500':
          description: Server error
          content:
            application/json:
              example:
                error:
                  message: Unexpected error
                  details: Stack or message

  /accounts/resolve:
    post:
      summary: Resolve Avito account by URL and deduplicate by avitoUserId
      description: |
        Accepts Avito profile URL, fetches details (displayName, avatarUrl, canonicalUrl), determines avitoUserId.
        Returns existing account with 200 or creates a new one with 201.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [url]
              properties:
                url:
                  type: string
                  example: https://www.avito.ru/profile/123456789
      responses:
        '200':
          description: Account exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Account'
        '201':
          description: Account created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Account'
        '400':
          description: Invalid URL
          content:
            application/json:
              example:
                error:
                  message: Invalid URL: not-a-url
                  details: URL constructor failed
        '422':
          description: Could not determine avitoUserId
          content:
            application/json:
              example:
                error:
                  message: Unable to resolve avitoUserId from page content or URL
                  details: Empty avitoUserId
        '500':
          description: Server error
          content:
            application/json:
              example:
                error:
                  message: Failed to fetch Avito account details: Network timeout
                  details: Network timeout

  /accounts/popular:
    get:
      summary: Get popular accounts ordered by viewsCount desc
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Account'
                  meta:
                    type: object
                    properties:
                      limit:
                        type: integer
        '500':
          description: Server error
          content:
            application/json:
              example:
                error:
                  message: Unexpected error
                  details: Stack or message

  /accounts/{id}:
    get:
      summary: Get account by id and increment its viewsCount
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Account ObjectId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Account'
        '400':
          description: Invalid id
          content:
            application/json:
              example:
                error:
                  message: Invalid account id
                  details: Bad ObjectId
        '404':
          description: Account not found
          content:
            application/json:
              example:
                error:
                  message: Account not found
                  details: No document with provided id
        '500':
          description: Server error
          content:
            application/json:
              example:
                error:
                  message: Unexpected error
                  details: Stack or message

  /accounts/{id}/comments:
    get:
      summary: List comments for an account (newest first)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Account ObjectId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid id
          content:
            application/json:
              example:
                error:
                  message: Invalid account id
                  details: Bad ObjectId
        '404':
          description: Account not found
          content:
            application/json:
              example:
                error:
                  message: Account not found
                  details: No document with provided id
        '500':
          description: Server error
          content:
            application/json:
              example:
                error:
                  message: Unexpected error
                  details: Stack or message
    post:
      summary: Create a comment for an account
      description: |
        The server deterministically generates authorName from the provided nameKey using a stable algorithm.
        Backward compatibility is supported via legacy authorName when nameKey is absent.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Account ObjectId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [nameKey, text]
              properties:
                nameKey:
                  type: string
                  example: session-xyz-987
                authorName:
                  type: string
                  deprecated: true
                text:
                  type: string
                  example: Great seller!
      responses:
        '201':
          description: Comment created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Comment'
        '400':
          description: Validation error
          content:
            application/json:
              examples:
                missingNameKey:
                  summary: Missing nameKey (and no legacy authorName)
                  value:
                    error:
                      message: Field "nameKey" is required
                      details: Missing nameKey
                missingText:
                  summary: Missing text
                  value:
                    error:
                      message: Field "text" is required
                      details: Empty text
        '404':
          description: Account not found
          content:
            application/json:
              example:
                error:
                  message: Account not found
                  details: No document with provided id
        '500':
          description: Server error
          content:
            application/json:
              example:
                error:
                  message: Unexpected error
                  details: Stack or message

  /accounts/{id}/comments/popular:
    get:
      summary: List most popular comments for an account
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Account ObjectId
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 10
            default: 2
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid id
          content:
            application/json:
              example:
                error:
                  message: Invalid account id
                  details: Bad ObjectId
        '404':
          description: Account not found
          content:
            application/json:
              example:
                error:
                  message: Account not found
                  details: No document with provided id
        '500':
          description: Server error
          content:
            application/json:
              example:
                error:
                  message: Unexpected error
                  details: Stack or message

  /comments/{commentId}/like:
    post:
      summary: Put a like on a comment
      parameters:
        - in: path
          name: commentId
          required: true
          schema:
            type: string
          description: Comment ObjectId
      responses:
        '200':
          description: Like added (idempotent or incremented)
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid id
          content:
            application/json:
              example:
                error:
                  message: Invalid comment id
                  details: Bad ObjectId
        '404':
          description: Comment not found
          content:
            application/json:
              example:
                error:
                  message: Comment not found
                  details: No document with provided id
        '500':
          description: Server error
          content:
            application/json:
              example:
                error:
                  message: Unexpected error
                  details: Stack or message
  /comments/{commentId}/unlike:
    post:
      summary: Remove a like from a comment (not below zero)
      parameters:
        - in: path
          name: commentId
          required: true
          schema:
            type: string
          description: Comment ObjectId
      responses:
        '200':
          description: Like removed (floored at 0)
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid id
          content:
            application/json:
              example:
                error:
                  message: Invalid comment id
                  details: Bad ObjectId
        '404':
          description: Comment not found
          content:
            application/json:
              example:
                error:
                  message: Comment not found
                  details: No document with provided id
        '500':
          description: Server error
          content:
            application/json:
              example:
                error:
                  message: Unexpected error
                  details: Stack or message
components:
  schemas:
    Listing:
      type: object
      properties:
        _id:
          type: string
          description: Mongo ObjectId
        url:
          type: string
        canonicalUrl:
          type: string
        avitoId:
          type: string
          description: Unique Avito listing id
        mainImageUrl:
          type: string
          description: Main image URL (from og:image)
        title:
          type: string
        viewsCount:
          type: integer
          minimum: 0
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Account:
      type: object
      properties:
        _id:
          type: string
          description: Mongo ObjectId
        url:
          type: string
        canonicalUrl:
          type: string
        avitoUserId:
          type: string
          description: Unique Avito user id
        displayName:
          type: string
        avatarUrl:
          type: string
        viewsCount:
          type: integer
          minimum: 0
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Comment:
      type: object
      properties:
        _id:
          type: string
          description: Mongo ObjectId
        listingId:
          type: string
          description: Listing ObjectId (either listingId or accountId is present)
        accountId:
          type: string
          description: Account ObjectId (either listingId or accountId is present)
        authorName:
          type: string
          description: Generated on the server from nameKey. Same nameKey always yields the same authorName.
        text:
          type: string
        likesCount:
          type: integer
          description: Number of likes for this comment
          minimum: 0
          default: 0
        createdAt:
          type: string
          format: date-time
