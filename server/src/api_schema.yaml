openapi: 3.0.3
info:
  title: Listings, Accounts and Comments API
  version: 1.7.0
  description: API for resolving Avito listings and accounts, deduplicating by IDs, tracking popularity, and managing comments with likes.
servers:
  - url: /api
paths:
  /hello:
    get:
      summary: Health hello message
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                message: Hello from API!
        '500':
          description: Server error
          content:
            application/json:
              example:
                error:
                  message: Internal error
                  details: Failed to handle /hello
  /status:
    get:
      summary: Service status
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                status: ok
                timestamp: 2025-01-01T00:00:00.000Z
                uptimeSec: 123
        '500':
          description: Server error
          content:
            application/json:
              example:
                error:
                  message: Internal error
                  details: Failed to handle /status
  /listings/resolve:
    post:
      summary: Resolve listing by Avito URL, normalize and deduplicate by avitoId
      description: |
        Accepts an original Avito URL, fetches details (title, mainImageUrl, canonicalUrl),
        determines avitoId, and either links to an existing listing or creates a new one.
        Deduplication is deterministic by avitoId: existing listing returns 200, new returns 201.

        The resolver is resilient to Avito rate limits and temporary errors (429/5xx). It performs up to 5 retries with backoff
        [250ms, 750ms, 1500ms, 3000ms, 5000ms] and, if the page remains unavailable, uses an offline fallback to extract avitoId
        directly from the URL without any network calls. When a valid ID is present in the URL, the service can still return 200/201
        even if the page cannot be fetched. In offline mode, canonicalUrl is preserved as the original URL and a fallbackTitle
        is attempted from the URL path (last segment split by '_' and '-', skipping the token equal to avitoId). The first word is capitalized.

        Note on lazy enrichment: If the initial fetch returns minimal offline data (e.g., empty mainImageUrl or title),
        the service may trigger background enrichment. You can also force enrichment via POST /listings/{id}/enrich.

        Diagnostics: server records the outcome of background enrichments including the last error in the field lastEnrichError.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [url]
              properties:
                url:
                  type: string
                  example: https://www.avito.ru/moskva/bytovaya_elektronika/iphone_14_pro_256gb_123456789
      responses:
        '200':
          description: Listing already exists (found by avitoId or legacy URL)
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Listing'
        '201':
          description: Listing created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Listing'
        '400':
          description: Bad request (invalid url)
          content:
            application/json:
              example:
                error:
                  message: Invalid URL: not-a-valid-url
                  details: URL constructor failed
        '422':
          description: Could not determine avitoId from the provided URL/page
          content:
            application/json:
              example:
                error:
                  message: Unable to resolve avitoId from page content or URL
                  details: Empty avitoId or parse failure
        '500':
          description: Server error while resolving/creating
          content:
            application/json:
              example:
                error:
                  message: Failed to fetch Avito details: Network timeout
                  details: Network timeout
  /listings/popular:
    get:
      summary: Get popular listings ordered by viewsCount desc
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Listing'
                  meta:
                    type: object
                    properties:
                      limit:
                        type: integer
        '500':
          description: Server error
          content:
            application/json:
              example:
                error:
                  message: Unexpected error
                  details: Stack or message
  /listings/{id}:
    get:
      summary: Get listing by id and increment its viewsCount
      description: |
        Returns a listing document and increments its viewsCount. If the listing lacks title or mainImageUrl,
        the service may trigger a background lazy enrichment (throttled and with limited attempts up to 12) and still return the current document immediately.
        Clients can re-fetch after a short delay to get enriched fields.

        Diagnostics: field lastEnrichError contains the message from the most recent failed enrichment attempt (if any).
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Listing ObjectId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Listing'
        '400':
          description: Invalid id
          content:
            application/json:
              example:
                error:
                  message: Invalid listing id
                  details: Bad ObjectId
        '404':
          description: Listing not found
          content:
            application/json:
              example:
                error:
                  message: Listing not found
                  details: No document with provided id
        '500':
          description: Server error
          content:
            application/json:
              example:
                error:
                  message: Unexpected error
                  details: Stack or message
  /listings/{id}/enrich:
    post:
      summary: Force enrichment for the listing and return the updated document
      description: |
        Triggers immediate enrichment for the listing even if background enrichment is throttled or paused.
        The endpoint attempts to fetch fresh metadata (title, mainImageUrl, canonicalUrl) and updates the document.
        Returns the latest version of the listing document on success.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Listing ObjectId
      responses:
        '200':
          description: Enrichment completed successfully and the updated document is returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Listing'
        '400':
          description: Invalid id
          content:
            application/json:
              example:
                error:
                  message: Invalid listing id
                  details: Bad ObjectId
        '404':
          description: Listing not found
          content:
            application/json:
              example:
                error:
                  message: Listing not found
                  details: No document with provided id
        '500':
          description: Server error while enriching
          content:
            application/json:
              example:
                error:
                  message: Unexpected error
                  details: Stack or message
  /listings/{id}/comments:
    get:
      summary: List comments for a listing (newest first)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Listing ObjectId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid id
          content:
            application/json:
              example:
                error:
                  message: Invalid listing id
                  details: Bad ObjectId
        '404':
          description: Listing not found
          content:
            application/json:
              example:
                error:
                  message: Listing not found
                  details: No document with provided id
        '500':
          description: Server error
          content:
            application/json:
              example:
                error:
                  message: Unexpected error
                  details: Stack or message
    post:
      summary: Create a comment for a listing
      description: |
        The server deterministically generates authorName from the provided nameKey using a stable algorithm.
        Backward compatibility: if legacy authorName is provided without nameKey, it will be used. If nameKey is present, authorName from the client is ignored.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Listing ObjectId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [nameKey, text]
              properties:
                nameKey:
                  type: string
                  example: session-abc-123
                authorName:
                  type: string
                  deprecated: true
                text:
                  type: string
                  example: Please contact me
      responses:
        '201':
          description: Comment created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Comment'
        '400':
          description: Validation error
          content:
            application/json:
              example:
                error:
                  message: Field "text" is required
                  details: Empty text
        '404':
          description: Listing not found
          content:
            application/json:
              example:
                error:
                  message: Listing not found
                  details: No document with provided id
        '500':
          description: Server error
          content:
            application/json:
              example:
                error:
                  message: Unexpected error
                  details: Stack or message
  /listings/{id}/comments/popular:
    get:
      summary: List most popular comments for a listing
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Listing ObjectId
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 10
            default: 2
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid id
          content:
            application/json:
              example:
                error:
                  message: Invalid listing id
                  details: Bad ObjectId
        '404':
          description: Listing not found
          content:
            application/json:
              example:
                error:
                  message: Listing not found
                  details: No document with provided id
        '500':
          description: Server error
          content:
            application/json:
              example:
                error:
                  message: Unexpected error
                  details: Stack or message

  /accounts/resolve:
    post:
      summary: Resolve Avito account by URL and deduplicate by avitoUserId
      description: |
        Accepts Avito profile URL, fetches details (displayName, avatarUrl, canonicalUrl), determines avitoUserId.
        Supports numeric and hex identifiers (e.g., sellerId=708ad9c736d8ff0eec6a8d558bcfd7c3), including brand pages like /brands/... with sellerId in query.
        Returns existing account with 200 or creates a new one with 201.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [url]
              properties:
                url:
                  type: string
                  example: https://www.avito.ru/brands/awesome-dealer?sellerId=708ad9c736d8ff0eec6a8d558bcfd7c3
      responses:
        '200':
          description: Account exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Account'
        '201':
          description: Account created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Account'
        '400':
          description: Invalid URL
          content:
            application/json:
              example:
                error:
                  message: Invalid URL: not-a-url
                  details: URL constructor failed
        '422':
          description: Unable to resolve avitoUserId from page content or URL (numeric and hex identifiers are supported)
          content:
            application/json:
              example:
                error:
                  message: Unable to resolve avitoUserId from page content or URL
                  details: Empty avitoUserId
        '500':
          description: Server error
          content:
            application/json:
              example:
                error:
                  message: Failed to fetch Avito account details: Network timeout
                  details: Network timeout

  /accounts/popular:
    get:
      summary: Get popular accounts ordered by viewsCount desc
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Account'
                  meta:
                    type: object
                    properties:
                      limit:
                        type: integer
        '500':
          description: Server error
          content:
            application/json:
              example:
                error:
                  message: Unexpected error
                  details: Stack or message

  /accounts/{id}:
    get:
      summary: Get account by id and increment its viewsCount
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Account ObjectId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Account'
        '400':
          description: Invalid id
          content:
            application/json:
              example:
                error:
                  message: Invalid account id
                  details: Bad ObjectId
        '404':
          description: Account not found
          content:
            application/json:
              example:
                error:
                  message: Account not found
                  details: No document with provided id
        '500':
          description: Server error
          content:
            application/json:
              example:
                error:
                  message: Unexpected error
                  details: Stack or message

  /accounts/{id}/comments:
    get:
      summary: List comments for an account (newest first)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Account ObjectId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid id
          content:
            application/json:
              example:
                error:
                  message: Invalid account id
                  details: Bad ObjectId
        '404':
          description: Account not found
          content:
            application/json:
              example:
                error:
                  message: Account not found
                  details: No document with provided id
        '500':
          description: Server error
          content:
            application/json:
              example:
                error:
                  message: Unexpected error
                  details: Stack or message
    post:
      summary: Create a comment for an account
      description: |
        The server deterministically generates authorName from the provided nameKey using a stable algorithm.
        Backward compatibility is supported via legacy authorName when nameKey is absent.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Account ObjectId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [nameKey, text]
              properties:
                nameKey:
                  type: string
                  example: session-xyz-987
                authorName:
                  type: string
                  deprecated: true
                text:
                  type: string
                  example: Great seller!
      responses:
        '201':
          description: Comment created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Comment'
        '400':
          description: Validation error
          content:
            application/json:
              examples:
                missingNameKey:
                  summary: Missing nameKey (and no legacy authorName)
                  value:
                    error:
                      message: Field "nameKey" is required
                      details: Missing nameKey
                missingText:
                  summary: Missing text
                  value:
                    error:
                      message: Field "text" is required
                      details: Empty text
        '404':
          description: Account not found
          content:
            application/json:
              example:
                error:
                  message: Account not found
                  details: No document with provided id
        '500':
          description: Server error
          content:
            application/json:
              example:
                error:
                  message: Unexpected error
                  details: Stack or message

  /accounts/{id}/comments/popular:
    get:
      summary: List most popular comments for an account
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Account ObjectId
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 10
            default: 2
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid id
          content:
            application/json:
              example:
                error:
                  message: Invalid account id
                  details: Bad ObjectId
        '404':
          description: Account not found
          content:
            application/json:
              example:
                error:
                  message: Account not found
                  details: No document with provided id
        '500':
          description: Server error
          content:
            application/json:
              example:
                error:
                  message: Unexpected error
                  details: Stack or message
components:
  schemas:
    Listing:
      type: object
      properties:
        _id:
          type: string
          description: Mongo ObjectId
        url:
          type: string
        canonicalUrl:
          type: string
        avitoId:
          type: string
          description: Unique Avito listing id
        mainImageUrl:
          type: string
          description: Main image URL (from og:image)
        title:
          type: string
        viewsCount:
          type: integer
          minimum: 0
        lastEnrichedAt:
          type: string
          format: date-time
          description: Timestamp of the last background enrichment attempt
        enrichAttempts:
          type: integer
          minimum: 0
          description: Number of background enrichment attempts performed
        lastEnrichError:
          type: string
          description: Message of the last failed enrichment attempt (empty when the last enrichment succeeded with improvements)
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Account:
      type: object
      properties:
        _id:
          type: string
          description: Mongo ObjectId
        url:
          type: string
        canonicalUrl:
          type: string
        avitoUserId:
          type: string
          description: Unique Avito user id (numeric or hex). Example of hex sellerId: 708ad9c736d8ff0eec6a8d558bcfd7c3
          example: 708ad9c736d8ff0eec6a8d558bcfd7c3
        displayName:
          type: string
        avatarUrl:
          type: string
        viewsCount:
          type: integer
          minimum: 0
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Comment:
      type: object
      properties:
        _id:
          type: string
          description: Mongo ObjectId
        listingId:
          type: string
          description: Listing ObjectId (either listingId or accountId is present)
        accountId:
          type: string
          description: Account ObjectId (either listingId or accountId is present)
        authorName:
          type: string
          description: Generated on the server from nameKey. Same nameKey always yields the same authorName.
        text:
          type: string
        likesCount:
          type: integer
          description: Number of likes for this comment
          minimum: 0
          default: 0
        createdAt:
          type: string
          format: date-time
